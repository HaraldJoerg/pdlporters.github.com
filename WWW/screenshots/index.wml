#include "header.wml"
<lang:star:slice: index_*.html>

<!--===================================================================-->
<HEAD>
<META HTTP-EQUIV="KEYWORDS" 
      CONTENT="Schwebel">
<META NAME="DESCRIPTION" 
      CONTENT="Robert Schwebel">
<TITLE>PDL - Screenshots</TITLE>
</HEAD>
<!--===================================================================-->

<set-var doctype=html>

#include '$(PDLROOT)/templates/top.wml'
#include '$(PDLROOT)/menue.wml'

<!-- ---------------------------------------------------------------------- -->

<HR>

<EN><H2> PDL Tour </H2></EN>
<DE><H2> PDL Beispiele </H2></DE>

<EN><H3> Introduction </H3></EN>
<DE><H3> Einführung </H3></DE>

<en-p> Welcome to a short tour of PDL's capabilities. This tour shows some of the main selling points of PDL. However, because
we want this script to run everywhere, some modules which require external
modules for use are explicitly excluded, namely
<UL>
<LI>PDL::Graphics::TriD (3D Graphics) [*]</LI>
<LI>PDL::Graphics::PGPLOT (PGPLOT graphics)</LI>
<LI>PDL::IO::FlexRaw (flexible raw input/output)</LI>
</UL>

[*]: this module has its separate demos in a subdirectory.
</en-p>

<de-p> Willkommen zu einer kurzen Tour durch die Möglichkeiten von PDL. Diese
Tour soll einige der grundlegenden Features von PDL aufzeigen. Module, die
externe Libraries benötigen, wie z.B.
<UL>
<LI>PDL::Graphics::TriD (3D Grafik) [*]</LI>
<LI>PDL::Graphics::PGPLOT (Grafik mit PGPLOT)</LI>
<LI>PDL::IO::FlexRaw (flexible Ein/Ausgabe)</LI>
</UL>
werden hier explizit nicht vorgestellt. Diese Scripte laufen also in jeder
PDL-Umgebung.

[*]: Diese Module haben eigene Demo-Skripte.

</de-p>

<!-- ----- -->

<en-p> Note that your own scripts must start with "<CODE>use PDL;</CODE>"  to
work properly, so that you can simply say "<CODE>perl script.pl</CODE>" or you
can just try some of the commands illustrated in the demos by just retyping
them at the perldl command prompt.</en-p>

<de-p> Zu beachten ist, daß eigene Scripte mit "<CODE>use PDL;</CODE>" beginnen
müssen. Dann kann auf der Kommandozeile eingegeben werden: "<CODE>perl
script.pl</CODE>". Eine andere Möglichkeit zum Ausprobieren der hier
vorgestellten Demos ist, sie direkt in der interaktiven
"<code>perldl</code>"-Shell einzugeben.</de-p>

<!-- ---------------------------------------------------------------------- -->

<HR>

<EN><H3> Generation of PDLs </H3></EN>
<DE><H3> Erzeugen von PDLs </H3></DE>

<en-p> PDLs or "piddles" are N-dimensional data cubes. There are several ways of
generating piddles:</en-p>

<de-p> PDLs oder "piddles" sind N-dimensionale Datensätze. Es gibt verschiedene
Möglichkeiten, piddles zu erzeugen:</de-p>

<!-- ----- -->

<en-p> We generate a zero filled 5x5 matrix:</en-p>

<de-p> Wir erzeugen eine mit Nullen gefüllte 5x5-Matrix:</de-p>

<PRE>
<CODE>
<STRONG>perldl></STRONG> $a = zeroes 5,5;
<STRONG>perldl></STRONG> print $a;

[
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
]
</PRE>

<!-- ----- -->

<en-p> Now, don't think that the number of dimensions is limited to two:</en-p>

<de-p> Die Zahl der Dimensionen ist natürlich nicht auf zwei beschränkt:</de-p>

<PRE>
<STRONG>perldl></STRONG> $m = zeroes(3,2,2); # 2x2x2 cube
<STRONG>perldl></STRONG> print $m;

[
 [
  [0 0 0]
  [0 0 0]
 ]
 [
  [0 0 0]
  [0 0 0]
 ]
]
</PRE>

<!-- ----- -->

<HR>

<EN><H3> Mathematical operations </H3></EN>
<DE><H3> Mathematische Operationen </H3></DE>

<en-p> Operators like increment work...</en-p>

<de-p> Es können Operatoren wie "Incrementieren" verwendet werden... </de-p>

<PRE>
<STRONG>perldl></STRONG> $a ++;
<STRONG>perldl></STRONG> print $a;

[
 [1 1 1 1 1]
 [1 1 1 1 1]
 [1 1 1 1 1]
 [1 1 1 1 1]
 [1 1 1 1 1]
]
</PRE>

<!-- ----- -->

<en-p> "xvals" and "yvals" (yes, there is also zvals...) give you piddles 
which give the coordinate value.</en-p>

<de-p> "xvals" und "yvals" (ja, es gibt auch "zvals"...) erzeugen piddles, die
die dazugehörigen Koordinatenwerte beinhalten.</de-p>

<PRE>
<STRONG>perldl></STRONG> $b = xvals $a;
<STRONG>perldl></STRONG> print $b;

[
 [0 1 2 3 4]
 [0 1 2 3 4]
 [0 1 2 3 4]
 [0 1 2 3 4]
 [0 1 2 3 4]
]
</PRE>

<!-- ----- -->

<en-p> So you can do things like </en-p>

<de-p> Damit können Dinge gemacht werden wie </de-p>

<PRE>
<STRONG>perldl></STRONG> $b = $a + 0.1 * xvals($a) + 0.01 * yvals($a);
<STRONG>perldl></STRONG> print $b;

[
 [   1  1.1  1.2  1.3  1.4]
 [1.01 1.11 1.21 1.31 1.41]
 [1.02 1.12 1.22 1.32 1.42]
 [1.03 1.13 1.23 1.33 1.43]
 [1.04 1.14 1.24 1.34 1.44]
]
</PRE>

<!-- ----- -->

<en-p> Arithmetic operations work: </en-p>

<de-p> Arithmetische Operationen funktionieren: </de-p>

<PRE>
<STRONG>perldl></STRONG> $x = xvals(10) / 5;
<STRONG>perldl></STRONG> print $x,"\n";
<STRONG>perldl></STRONG> print ((sin $x),"\n");

[0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8]
[0 0.19866933 0.38941834 0.56464247 0.71735609 0.84147098 0.93203909 0.98544973  0.9995736 0.97384763]
</PRE>

<!-- ----- -->

<HR>

<EN><H3> Slices </H3></EN>
<DE><H3> Slices </H3></DE>

<en-p>You can also take slices:</en-p>

<en-p>Es können Schnitte durch den Datensatz gelegt werden: </de-p>

<pre>

<STRONG>perldl></STRONG> print $b;
<STRONG>perldl></STRONG> print $b->slice(":,2:3");  # rows 2 and 3

[
 [   1  1.1  1.2  1.3  1.4]
 [1.01 1.11 1.21 1.31 1.41]
 [1.02 1.12 1.22 1.32 1.42]
 [1.03 1.13 1.23 1.33 1.43]
 [1.04 1.14 1.24 1.34 1.44]
]

[
 [1.02 1.12 1.22 1.32 1.42]
 [1.03 1.13 1.23 1.33 1.43]
]

<STRONG>perldl></STRONG> print $b->slice("2:3,:");  # or columns 2 and 3

[
 [ 1.2  1.3]
 [1.21 1.31]
 [1.22 1.32]
 [1.23 1.33]
 [1.24 1.34]
]

<STRONG>perldl></STRONG> print $b;
<STRONG>perldl></STRONG> print $b->diagonal(0,1),"\n"; # 0 and 1 are the dimensions

[
 [   1  1.1  1.2  1.3  1.4]
 [1.01 1.11 1.21 1.31 1.41]
 [1.02 1.12 1.22 1.32 1.42]
 [1.03 1.13 1.23 1.33 1.43]
 [1.04 1.14 1.24 1.34 1.44]
]
</PRE>

<!-- ----- -->

<en-p>One of the really nifty features is that the slices are actually
references back to the original piddle:</en-p>

<de-p>Eines der rafiniertesten Features ist die Tatsache, daß die Slices
Referenzen auf einen Teil eines Original-Piddles darstellen:</de-p>

<PRE>
<STRONG>perldl></STRONG> $diag = $b->diagonal(0,1);
<STRONG>perldl></STRONG> print $b;
<STRONG>perldl></STRONG> print $diag,"\n";
<STRONG>perldl></STRONG> $diag+=100;
<STRONG>perldl></STRONG> print "AFTER:\n";
<STRONG>perldl></STRONG> print $diag,"\n";
<STRONG>perldl></STRONG> print "Now, guess what \$b looks like?\n";

[
 [   1  1.1  1.2  1.3  1.4]
 [1.01 1.11 1.21 1.31 1.41]
 [1.02 1.12 1.22 1.32 1.42]
 [1.03 1.13 1.23 1.33 1.43]
 [1.04 1.14 1.24 1.34 1.44]
]
[1 1.11 1.22 1.33 1.44]
AFTER:
[101 101.11 101.22 101.33 101.44]
Now, guess what $b looks like?

<STRONG>perldl></STRONG> # Yes, it has changed:
<STRONG>perldl></STRONG> print $b;

[
 [   101    1.1    1.2    1.3    1.4]
 [  1.01 101.11   1.21   1.31   1.41]
 [  1.02   1.12 101.22   1.32   1.42]
 [  1.03   1.13   1.23 101.33   1.43]
 [  1.04   1.14   1.24   1.34 101.44]
]
</PRE>

<!-- ----- -->

<en-p>Another example (we only modify elements 0,2 and 4 of each row):</en-p>

<de-p>Ein anderes Beispiel: wir modifizieren nur die Elemente 0, 2 und 4 jeder
Zeile:</de-p>

<PRE>

<STRONG>perldl></STRONG> $t = $b->slice("0:4:2"); $t += 50;
<STRONG>perldl></STRONG> print $b;

[
 [   151    1.1   51.2    1.3   51.4]
 [ 51.01 101.11  51.21   1.31  51.41]
 [ 51.02   1.12 151.22   1.32  51.42]
 [ 51.03   1.13  51.23 101.33  51.43]
 [ 51.04   1.14  51.24   1.34 151.44]
]
</PRE>

<!-- ----- -->

<en-p> There are lots of useful functions in e.g. PDL::Primitive and
PDL::Slices - we can't show you all but here are some examples:</en-p>

<de-p> Es gibt eine Reihe nützlicher Funktionen, z.B. in PDL::Primitive und
PDL::Slices, die nicht alle hier vorgestellt werden können. Trotzdem einige
Beispiele:</de-p>

<PRE>

<STRONG>perldl></STRONG> print $b;
<STRONG>perldl></STRONG> print $b->sum, "\n";
<STRONG>perldl></STRONG> print $b->sumover,"\n"; # Only over first dim.

[
 [   151    1.1   51.2    1.3   51.4]
 [ 51.01 101.11  51.21   1.31  51.41]
 [ 51.02   1.12 151.22   1.32  51.42]
 [ 51.03   1.13  51.23 101.33  51.43]
 [ 51.04   1.14  51.24   1.34 151.44]
]
1280.5
[256 256.05 256.1 256.15 256.2]

<STRONG>perldl></STRONG> print $b->xchg(0,1);
<STRONG>perldl></STRONG> print $b->minimum,"\n"; # over first dim.
<STRONG>perldl></STRONG> print $b->min,"\n";

[
 [   151  51.01  51.02  51.03  51.04]
 [   1.1 101.11   1.12   1.13   1.14]
 [  51.2  51.21 151.22  51.23  51.24]
 [   1.3   1.31   1.32 101.33   1.34]
 [  51.4  51.41  51.42  51.43 151.44]
]
[1.1 1.31 1.12 1.13 1.14]
1.1

<STRONG>perldl></STRONG> print $b->random;

[
 [ 0.51385498  0.17572021  0.30862427  0.53451538  0.94760132]
 [ 0.17172241  0.70220947  0.22640991  0.49475098  0.12469482]
 [0.083892822  0.38961792  0.27722168  0.36804199  0.98342896]
 [ 0.53536987  0.76565552  0.64645386  0.76712036   0.7802124]
 [ 0.82293701   0.1519165  0.62545776  0.31466675  0.34689331]
]
</PRE>

<!-- ----- -->

<HR>

<EN><H3> Manipulation of parts of piddles </H3></EN>
<DE><H3> Manipulation von Teilen von Piddles </H3></DE>

<en-p>Here are some more advanced tricks for selecting parts of 1-D
vectors:</en-p>

<de-p>Hier noch einige komplexere Tricks zur Selektrion von Teilen von 1-D
Vektoren:</de-p>

<pre>

<STRONG>perldl></STRONG> $a = (xvals 12)/3;
<STRONG>perldl></STRONG> $i = which(sin($a) > 0.5);   # Indices of those sines > 0.5
<STRONG>perldl></STRONG> print $a,"\n";
<STRONG>perldl></STRONG> print $i,"\n";
<STRONG>perldl></STRONG> print $a->index($i),"\n";
<STRONG>perldl></STRONG> # and we can have the effect of the last command in one
<STRONG>perldl></STRONG> # go using 'where' instead of 'which' and 'index' as in
<STRONG>perldl></STRONG> print $a->where(sin($a) > 0.5),"\n";
<STRONG>perldl></STRONG> # and finally take the sin of these elements
<STRONG>perldl></STRONG> # (to show that these are indeed the correct ones)
<STRONG>perldl></STRONG> print sin($a->index($i)),"\n";

[0 0.33333333 0.66666667 1  1.3333333  1.6666667 2  2.3333333  2.6666667 3  3.3333333  3.6666667]
[2 3 4 5 6 7]
[0.66666667 1  1.3333333  1.6666667 2  2.3333333]
[0.66666667 1  1.3333333  1.6666667 2  2.3333333]
[ 0.6183698 0.84147098  0.9719379 0.99540796 0.90929743 0.72308588]
</CODE>
</PRE>

<!-- ---------------------------------------------------------------------- -->

<HR>

<EN><H3> 3D Graphics Examples </H3></EN>
<DE><H3> 3D Grafik-Beispiele </H3></DE>

<en-p> Here are some pretty pictures generated using the 
<CODE>PDL::Graphics::TriD</CODE> module, follow the links to get full-size 
pictures and the PDL code which produced them.</en-p>

<de-p> Die folgenden Abbildung zeigt einige "pretty pictures", die mit Hilfe des
<CODE>PDL::Graphics::TriD</CODE>-Moduls erzeugt wurden. Ein Klick auf die
Screenshots führt zu einer großen Version und dem Code, der die Bilder erzeugt
hat.</de-p>

<P ALIGN=center>
<A HREF="ex1.gif"><IMG SRC="ex1thumb.gif" alt="Example 1"></A>
<A HREF="ex2.gif"><IMG SRC="ex2thumb.gif" alt="Example 2"></A>
<A HREF="ex3.gif"><IMG SRC="ex3thumb.gif" alt="Example 3"></A>

<en-p> Note when displayed with PDL viewing from different angles is as simple
as rotating the figure with the mouse!</en-p>

<de-p> Die 3D-Plots können dabei mit der Maus gedreht und aus verschiedenen
Richtungen angeschaut werden!</de-p>


#include "$(PDLROOT)/templates/footer_rs.wml"
#include "$(PDLROOT)/templates/bottom.wml"
