<!--#include virtual="/head.html"-->
<TITLE>PDL - Screenshots / Demos</TITLE>
<STYLE type="text/css">span.comment{color:red;}</STYLE>
</HEAD>
<BODY>

<div id="navBar">
<!--#include virtual="/menu.html"-->
</div><!--end div navBar-->

<div id="main">
<H2> 2D Plotting with PGPLOT </H2>

<p align="justify">  Welcome to this tour of the PDL's PGPLOT interface.</p>

<p align="justify"> This tour will introduce the PDL's PGPLOT plotting
module and show what this powerful package can provide in terms of
plotting. It is not designed to give a full tour of PGPLOT, you are
advised to see the routines provided with <CODE>pgperl</CODE> for
that.</p>

<p align="justify"> The PDL::Graphics::PGPLOT module provides a
high-level interface to PGPLOT. However if you want even better
control of your plots you might want to include the PGPLOT module
specifically:</p>

<PRE><CODE>
    use PGPLOT;
</CODE></PRE>

<p align="justify"> One aspect of PGPLOT that requires mention is the
use of devices: Normally PGPLOT will inquire you about what device you
want to use, with the prompt:</p>

<PRE><CODE>
    Graphics device/type (? to see list, default /NULL):
</CODE></PRE>

<HR>
<PRE>
<code>
<STRONG>perldl></STRONG> <span class="comment"># ensure the module is loaded (required for PDL versions>= 2.004)</span>
<STRONG>perldl></STRONG> use PDL::Graphics::PGPLOT;
<STRONG>perldl></STRONG> <span class="comment"># The size of the window can be specified</span>
<STRONG>perldl></STRONG> $ENV{PGPLOT_XW_WIDTH}=0.3;
<STRONG>perldl></STRONG> <span class="comment"># You can set your device explicitly</span>
<STRONG>perldl></STRONG> dev('/XSERVE');

<STRONG>perldl></STRONG> <span class="comment"># First we define some variables to use for the rest of the demo.</span>
<STRONG>perldl></STRONG> $x=sequence(10);
<STRONG>perldl></STRONG> $y=2*$x**2;
<STRONG>perldl></STRONG> <span class="comment"># Now a simple plot with points</span>
<STRONG>perldl></STRONG> points $x, $y;
</code></pre>

<A HREF="pgplot1.gif"><IMG ALT="[Thumbnail]" SRC="pg1.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment"># Here is the same with lines</span>
<STRONG>perldl></STRONG> line $x, $y;
</code></pre>

<A HREF="pgplot2.gif"><IMG ALT="[Thumbnail]" SRC="pg2.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment"># If you want to overlay one plot you can use the command</span>
<STRONG>perldl></STRONG> <span class="comment"># 'hold' to put the graphics on hold and 'release' to</span>
<STRONG>perldl></STRONG> <span class="comment"># revert the effect</span>
<STRONG>perldl></STRONG> points $x, $y, {SYMBOL=>4};  <span class="comment"># The last argument sets symboltype</span>
<STRONG>perldl></STRONG> hold;
<STRONG>perldl></STRONG> <span class="comment"># Now draw lines between the points</span>
<STRONG>perldl></STRONG> line $x, $y;
<STRONG>perldl></STRONG> <span class="comment"># Plot errorbars over the points</span>
<STRONG>perldl></STRONG> $yerr=sqrt($y);
<STRONG>perldl></STRONG> errb $x, $y, $yerr;
<STRONG>perldl></STRONG> <span class="comment"># To revert to old behaviour, use release</span>
<STRONG>perldl></STRONG> release;
</code></pre>

<A HREF="pgplot3.gif"><IMG ALT="[Thumbnail]" SRC="pg3.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> bin $x, $y;
<STRONG>perldl></STRONG> <span class="comment"># This plots a binned histogram of the data and as you can</span>
<STRONG>perldl></STRONG> <span class="comment"># see it made a new plot.</span>
</code></pre>

<A HREF="pgplot4.gif"><IMG ALT="[Thumbnail]" SRC="pg4.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment"># 2D data can also easily be accomodated:</span>
<STRONG>perldl></STRONG> <span class="comment"># First make a simple image</span>
<STRONG>perldl></STRONG> $gradient=sequence(40,40);
<STRONG>perldl></STRONG> <span class="comment"># Then display it.</span>
<STRONG>perldl></STRONG> imag $gradient;
<STRONG>perldl></STRONG> <span class="comment"># And overlay a contour plot over it:</span>
<STRONG>perldl></STRONG> hold;
<STRONG>perldl></STRONG> cont $gradient;
<STRONG>perldl></STRONG> release;

<STRONG>perldl></STRONG> <span class="comment"># PDL::Graphics::PGPLOT contains several colour tables,</span>
<STRONG>perldl></STRONG> <span class="comment"># a more extensive collection can be found in </span>
<STRONG>perldl></STRONG> <span class="comment"># PDL::Graphics::LUT</span>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> <span class="comment"># (note: the call to lut_names() can take a few seconds to execute)</span>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> use PDL::Graphics::LUT;
<STRONG>perldl></STRONG> @names = lut_names();
<STRONG>perldl></STRONG> print "Available tables: [ ", @names, " ]\n";
<STRONG>perldl></STRONG> <span class="comment"># use the first table</span>
<STRONG>perldl></STRONG> ctab( lut_data($names[0]) );
<STRONG>perldl></STRONG> use PGPLOT;
<STRONG>perldl></STRONG> pglabel "", "", "Colour table: $names[0]";

Available tables: [ aips0 backgr bgyrw blue blulut color green heat
idl11 idl12 idl14 idl15 idl2 idl4 idl5 idl6 isophot light manycol pastel
rainbow rainbow1 rainbow2 rainbow3 rainbow4 ramp random random1 random2
random3 random4 random5 random6 real red smooth smooth1 smooth2 smooth3
staircase stairs8 stairs9 standard ]
</code></pre>

<A HREF="pgplot5.gif"><IMG ALT="[Thumbnail]" SRC="pg5.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment"># To change plot specifics you can either use the specific PGPLOT</span>
<STRONG>perldl></STRONG> <span class="comment"># commands - recommended if you need lots of control over your</span>
<STRONG>perldl></STRONG> <span class="comment"># plot.</span>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> <span class="comment"># Or you can use the new option specifications:</span>
<STRONG>perldl></STRONG> <span class="comment"># To plot our first graph again with blue color, dashed line</span>
<STRONG>perldl></STRONG> <span class="comment"># and a thickness of 10 we can do:</span>
<STRONG>perldl></STRONG> line $x, $y, {COLOR=>5, LINESTYLE=>'dashed', LINEWIDTH=>10};
</code></pre>

<A HREF="pgplot6.gif"><IMG ALT="[Thumbnail]" SRC="pg6.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment"># Now for a more complicated example.</span>
<STRONG>perldl></STRONG> <span class="comment"># First create some data</span>
<STRONG>perldl></STRONG> $a=sequence(360)*3.1415/180.;
<STRONG>perldl></STRONG> $b=sin($a)*transpose(cos($a));
<STRONG>perldl></STRONG> <span class="comment"># Make a piddle with the wanted contours</span>
<STRONG>perldl></STRONG> $contours=pdl [0.1,0.5,1.0];
<STRONG>perldl></STRONG> <span class="comment"># And an array (reference to an array) with labels</span>
<STRONG>perldl></STRONG> $labels=['A', 'B', 'C'];
<STRONG>perldl></STRONG> <span class="comment"># Create a contour map of the data - note that we can set the colour of</span>
<STRONG>perldl></STRONG> <span class="comment"># the labels.</span>
<STRONG>perldl></STRONG> cont($b, {CONTOURS=>$contours, linest=>'DASHED',
<STRONG>perldl></STRONG> LINEWIDTH=>3, COLOR=>2, LABELCOL=>4});
<STRONG>perldl></STRONG> hold;
<STRONG>perldl></STRONG> pgqlw($linewidth);
<STRONG>perldl></STRONG> points $a->slice('0:-1:4')*180./3.1415;
<STRONG>perldl></STRONG> release;
</code></pre>

<A HREF="pgplot7.gif"><IMG ALT="[Thumbnail]" SRC="pg7.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> <span class="comment"># More examples of changing the plot defaults</span>
<STRONG>perldl></STRONG> <span class="comment"># </span>
<STRONG>perldl></STRONG> $a = 1+sequence(10);
<STRONG>perldl></STRONG> $b = $a*2;
<STRONG>perldl></STRONG> $bord_opt = { TYPE => 'RELATIVE', VALUE => 0.1 };
<STRONG>perldl></STRONG> line log10($a), $b, { AXIS => 'LOGX', BORDER => $bord_opt };
</code></pre>

<A HREF="pgplot8.gif"><IMG ALT="[Thumbnail]" SRC="pg8.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> <span class="comment"># We can also create vector maps of data</span>
<STRONG>perldl></STRONG> <span class="comment"># This requires one array for the horizontal component and</span>
<STRONG>perldl></STRONG> <span class="comment"># one for the vertical component</span>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> $horizontal=sequence(10,10);
<STRONG>perldl></STRONG> $vertical=transpose($horizontal)+random(10,10)*$horizontal/10.;
<STRONG>perldl></STRONG> $arrow={ARROW=> {FS=>1, ANGLE=>25, VENT=>0.7, SIZE=>3}};
<STRONG>perldl></STRONG> vect $horizontal, $vertical, {ARROW=>$arrow, COLOR=>RED};
<STRONG>perldl></STRONG> hold;
<STRONG>perldl></STRONG> cont $vertical-$horizontal, {COLOR=>YELLOW};
<STRONG>perldl></STRONG> release;
</code></pre>

<A HREF="pgplot9.gif"><IMG ALT="[Thumbnail]" SRC="pg9.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> <span class="comment"># To draw [filled] polygons, the command poly is handy:</span>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> $x=sequence(10)/5;
<STRONG>perldl></STRONG> poly $x, $x**2, {FILL=>HATCHED, COLOR=>BLUE};
</code></pre>

<A HREF="pgplot10.gif"><IMG ALT="[Thumbnail]" SRC="pg10.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> <span class="comment"># the latest feature of PDL are complex numbers</span>
<STRONG>perldl></STRONG> <span class="comment"># so let's play with a simple example</span>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> use PDL::Complex;
<STRONG>perldl></STRONG> $z50 = zeroes(50);
<STRONG>perldl></STRONG> $c = $z50->xlinvals(0,7)+i*$z50->xlinvals(2,4);
<STRONG>perldl></STRONG> line im sin $c; hold;      <span class="comment"># the imaginary part</span>
<STRONG>perldl></STRONG> line re sin $c;            <span class="comment"># real</span>
<STRONG>perldl></STRONG> line abs sin $c; release;  <span class="comment"># and the modulus</span>
</code></pre>
  
<A HREF="pgplot11.gif"><IMG ALT="[Thumbnail]" SRC="pg11.gif" width="170" height="136"> Output</A>

<pre><code>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> <span class="comment"># more complex numbers</span>
<STRONG>perldl></STRONG> <span class="comment">#</span>
<STRONG>perldl></STRONG> use PDL::Complex;
<STRONG>perldl></STRONG> $c =  zeroes(300)->xlinvals(0,12)+i*zeroes(300)->xlinvals(2,10);
<STRONG>perldl></STRONG> $sin = sin $c;
<STRONG>perldl></STRONG> line $sin->im, $sin->re;   <span class="comment"># look at the result in the complex plane</span>
</code></pre>

<A HREF="pgplot12.gif"><IMG ALT="[Thumbnail]" SRC="pg12.gif" width="170" height="136"> Output</A>

<HR>
<IMG SRC="/images/eMail.gif" ALT="" ALIGN="LEFT" width="77" height="37">
<SMALL>
This page was written by 

<A HREF="http://www.schwebel.de">Robert Schwebel</A>
and various other pdl-porters.

Please send bugs and ideas for this web page to 

<A HREF="mailto:pdl-porters@jach.hawaii.edu">pdl-porters@jach.hawaii.edu</A>.
<BR>
Last modified: <!--#flastmod virtual="plot2D.shtml"-->
</SMALL>
<p>
 <a href="http://validator.w3.org/check?uri=referer">
 <img src="http://www.w3.org/Icons/valid-html401"
 border="0" alt="Valid HTML 4.01 Transitional" height="31" width="88"></a>
  
 <a href="http://jigsaw.w3.org/css-validator/check/referer">
  <img style="border:0;width:88px;height:31px"
       src="http://jigsaw.w3.org/css-validator/images/vcss" 
       alt="Valid CSS!">
 </a>
</p>
</div><!--end div main-->
</BODY>
</HTML>
